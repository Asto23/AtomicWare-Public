--CUSTOM FROM HERE

--useless modules
GuiLibrary.RemoveObject("PanicOptionsButton")
GuiLibrary.RemoveObject("MissileTPOptionsButton")
GuiLibrary.RemoveObject("SwimOptionsButton")
GuiLibrary.RemoveObject("FullbrightOptionsButton")
GuiLibrary.RemoveObject("HighJumpOptionsButton")
GuiLibrary.RemoveObject("AutoRelicOptionsButton")
GuiLibrary.RemoveObject("RavenTPOptionsButton")
GuiLibrary.RemoveObject("XrayOptionsButton")
GuiLibrary.RemoveObject("SchematicaOptionsButton")
--inf jump
runFunction(function()
local infJumpConnection
local infjump = {["Enabled"] = false}
infjump = GuiLibrary["ObjectsThatCanBeSaved"]["BlatantWindow"]["Api"].CreateOptionsButton({
   ["Name"] = "InfiniteJump",
   ["HoverText"] = "Jump without touching ground",
   ["Function"] = function(callback)
   if callback then
      infJumpConnection = inputService.InputBegan:Connect(function(input)
      if input.KeyCode == Enum.KeyCode.Space and not inputService:GetFocusedTextBox() then
         if InfHold.Enabled and entityLibrary.isAlive then
            repeat
               lplr.Character:WaitForChild("Humanoid"):ChangeState("Jumping")
               task.wait()
            until not inputService:IsKeyDown(Enum.KeyCode.Space) or not infjump.Enabled or not InfHold.Enabled or inputService:GetFocusedTextBox()
         else
            if entityLibrary.isAlive then
               lplr.Character:WaitForChild("Humanoid"):ChangeState("Jumping")
            end
         end
      end
      end)
   else
      if infJumpConnection then
         infJumpConnection:Disconnect()
      end
   end
end
})
InfHold = infjump.CreateToggle({
["Name"] = "Hold",
["HoverText"] = "Hold down space to jump?",
["Function"] = function() end
})
end)
--kill feed destroyer
runFunction(function()
local KillFeed = {["Enabled"] = false}
local container

KillFeed = GuiLibrary["ObjectsThatCanBeSaved"]["RenderWindow"]["Api"].CreateOptionsButton({
["Name"] = "KillFeed",
["HoverText"] = "Destroys the KillFeed",
["Function"] = function(callback)
if callback then
   task.spawn(function()
   if container == nil then
      repeat
         local suc, res = pcall(function() return lplr.PlayerGui.KillFeedGui.KillFeedContainer end)
         if suc then
            container = res
         end
         task.wait()
      until container ~= nil
   end
   container.Visible = false
   end)
else
   if container then
      container.Visible = true
   end
end
end
})
end)
--name hider
runFunction(function()
local NameHider = {["Enabled"] = true}
local fakeplr = {["Name"] = "AtomicWare User", ["UserId"] = "239702688"}
local otherfakeplayers = {["Name"] = "Players", ["UserId"] = "1"}

local function plrthing(obj, property)
for i,v in pairs(game:GetService("Players"):GetChildren()) do
if v ~= lplr then
   obj[property] = obj[property]:gsub(v.Name, otherfakeplayers["Name"])
   obj[property] = obj[property]:gsub(v.DisplayName, otherfakeplayers["Name"])
   obj[property] = obj[property]:gsub(v.UserId, otherfakeplayers["UserId"])
else
   obj[property] = obj[property]:gsub(v.Name, fakeplr["Name"])
   obj[property] = obj[property]:gsub(v.DisplayName, fakeplr["Name"])
   obj[property] = obj[property]:gsub(v.UserId, fakeplr["UserId"])
end
end
end

local function newobj(v)
if v:IsA("TextLabel") or v:IsA("TextButton") then
plrthing(v, "Text")
v:GetPropertyChangedSignal("Text"):connect(function()
plrthing(v, "Text")
end)
end
if v:IsA("ImageLabel") then
plrthing(v, "Image")
v:GetPropertyChangedSignal("Image"):connect(function()
plrthing(v, "Image")
end)
end
end

NameHider = GuiLibrary["ObjectsThatCanBeSaved"]["UtilityWindow"]["Api"].CreateOptionsButton({
["Name"] = "NameHider",
["HoverText"] = "Disable TargetHud (And Don't Use Nametags)",
["Function"] = function(callback)
if callback then
for i,v in pairs(game:GetDescendants()) do
   newobj(v)
end
game.DescendantAdded:connect(newobj, obj)
else
createwarning("AtomicWare", "Join A New Match To Reset Your Name And Other Names.", 3)
end
end
})
end)
--leaving here because why not
runFunction(function()
local DragonBreathFunny = {Enabled = false}
DragonBreathFunny = GuiLibrary["ObjectsThatCanBeSaved"]["RenderWindow"]["Api"].CreateOptionsButton({
Name = "DragonBreathSpammer",
Function = function(callback)
if callback then
task.spawn(function()
repeat task.wait(0.3)
replicatedStorageService:WaitForChild("rbxts_include"):WaitForChild("node_modules"):WaitForChild("@rbxts"):WaitForChild("net"):WaitForChild("out"):WaitForChild("_NetManaged"):WaitForChild("DragonBreath"):FireServer({player = lplr})
until (not DragonBreathFunny.Enabled)
end)
end
end
})
end)
--fps unlocker
runFunction(function()
local fpsunlocker = {Enabled = false}
fpsunlocker = GuiLibrary["ObjectsThatCanBeSaved"]["WorldWindow"]["Api"].CreateOptionsButton({
Name = "FPS Unlocker",
Function = function(callback)
if callback then
setfpscap(9e9)
else
setfpscap(60)
end
end
})
end)
--chat at bottom
runFunction(function()
local Chat = {["Enabled"] = false}
Chat = GuiLibrary["ObjectsThatCanBeSaved"]["RenderWindow"]["Api"].CreateOptionsButton({
["Name"] = "Chat",
["Function"] = function(callback)
if callback then
game:GetService("TextChatService").ChatWindowConfiguration.VerticalAlignment = "Bottom"
else
game:GetService("TextChatService").ChatWindowConfiguration.VerticalAlignment = "Top"
end
end
})
end)
--scythe disabler
runFunction(function()
    local ScytheDisabler = {Enabled = false}
    ScytheDisabler = GuiLibrary.ObjectsThatCanBeSaved.CombatWindow.Api.CreateOptionsButton({
    Name = "ScytheDisabler",
              Function = function(callback)
                  if callback then
                    game:GetService('RunService').RenderStepped:Connect(function()
                        local args = {
                            [1] = {
                                ["direction"] = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector
                            }
                        }
    
                               game:GetService("ReplicatedStorage").rbxts_include.node_modules["@rbxts"].net.out._NetManaged.ScytheDash:FireServer(unpack(args))
                      end)
                  end
               end,
               Hovertext = "Requires Scythe"
            })
        end)
		--skid detector (probs gonna remove)
local skidDetected = {}
runFunction(function()
    SkidDetector = GuiLibrary.ObjectsThatCanBeSaved.BlatantWindow.Api.CreateOptionsButton({
        Name = "SkidDetector",
        Function = function(callback)
            if callback then
				repeat task.wait() until game:IsLoaded()
                local words = {
                    "LoveCleint",
                    "Love Client",
                    "ware",
                    "kingware",
                    "ColdClient",
                    "COLD CLIENT",
                    "client",
                    "privet",
                    "privete",
                    "pistonware",
                    "themagicpiston"   
                }

                for i, v in pairs(game:GetService("Players"):GetChildren()) do
                    v.Chatted:Connect(function(msg)
                        for _, word in ipairs(words) do
                            if string.find(string.lower(msg), string.lower(word)) and not skidDetected[v.Name] then
                                skidDetected[v.Name] = true
                                warningNotification("Skid Detector", v.Name.." is a likely skid!", 100) 
                                break
                            end
                        end
                    end)
                end
            end
        end
    })
end)

--Damage Indicators (probs gonna remove later)
local Messages = {"AtomicWare", "Free?", "Oh No", "Die", "KYS", "FUCK", 
}
local old
local FunnyIndicator = {Enabled = false}
FunnyIndicator = GuiLibrary.ObjectsThatCanBeSaved.WorldWindow.Api.CreateOptionsButton({
Name = "Damage Indicators",
Function = function(Callback)
    FunnyIndicator.Enabled = Callback
    if FunnyIndicator.Enabled then
        old = debug.getupvalue(bedwars.DamageIndicator, 10)["Create"]
        debug.setupvalue(bedwars.DamageIndicator, 10, {
            Create = function(self, obj, ...)
                spawn(function()
                    pcall(function()
                        obj.Parent.Text = Messages[math.random(1, #Messages)]
                        obj.Parent.TextColor3 = Color3.fromHSV(tick() % 5 / 5, 1, 1)
                    end)
                end)
                return game:GetService("TweenService"):Create(obj, ...)
            end
        })
    else
        debug.setupvalue(bedwars.DamageIndicator, 10, {
            Create = old
        })
        old = nil
    end
end
})

--blacklist (URL MUST BE HERE)
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")

local blacklistURL = "https://raw.githubusercontent.com/Guilded1/commandwhitelist/main/coolerblacklist.json"
local blacklistData = HttpService:JSONDecode(game:HttpGet(blacklistURL))

local function checkblacklisted(userId)
    for _, data in pairs(blacklistData) do
        for _, id in ipairs(data.users) do
            if id == tostring(userId) then
                return true, data.color
            end
        end
    end
    return false
end

local isLocalPlayerBlacklisted, playerColor = checkblacklisted(LocalPlayer.UserId)
if isLocalPlayerBlacklisted then
    LocalPlayer:Kick("Blacklisted from AtomicWare.")
end
--Testing Phase After this.
